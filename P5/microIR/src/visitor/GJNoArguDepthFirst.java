//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   private int retTempNo;

   private static int temp = DepthFirstVisitor.maxTemp+1;

//
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.println("MAIN ");
      n.f1.accept(this);
      n.f2.accept(this);
      System.out.println("END ");
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      // Commented on purpose. Since we may want to do MOVE TEMP + temp and things like that
      // n.f2.accept(this);
      System.out.println(" [ "+n.f2.f0.tokenImage + " ] ");
      n.f3.accept(this);
      System.out.println("BEGIN");
      n.f4.accept(this);
      System.out.printf("\tRETURN TEMP " + retTempNo + "\nEND \n" );
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.println("\tNOOP ");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.println("\tERROR ");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      System.out.printf("\tCJUMP TEMP " + retTempNo + " ");
      n.f2.accept(this);
      System.out.println();
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.printf("\tJUMP ");
      n.f1.accept(this);
      System.out.println();
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      if(n.f3.f0.which == 6){
          n.f1.accept(this);
          int temp1 = temp++;
          System.out.printf("\tMOVE TEMP " + temp1 + " ");
          System.out.println(((Label)n.f3.f0.choice).f0.tokenImage + " ");
          System.out.printf("\tHSTORE TEMP " + retTempNo + " " + n.f2.f0.tokenImage + " TEMP " + temp1+ " \n");
          //n.f2.accept(this);
          //n.f3.accept(this);
	  }
	  else{
          n.f1.accept(this);
          int temp1 = retTempNo;
          //n.f2.accept(this);
          n.f3.accept(this);
          int temp2 = retTempNo;
          System.out.printf("\tHSTORE TEMP " + temp1 + " " + n.f2.f0.tokenImage + " " + "TEMP " + temp2 + " \n");
	  }
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      // n.f1.accept(this);
      n.f2.accept(this);
      System.out.printf("\tHLOAD TEMP " + n.f1.f1.f0.tokenImage + " ");
      System.out.println("TEMP " + retTempNo + " " + n.f3.f0.tokenImage + " ");
      // n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      n.f0.accept(this);
      //n.f1.accept(this);
      if(n.f2.f0.choice instanceof Label){
    	  System.out.printf("\tMOVE TEMP " + n.f1.f1.f0.tokenImage + " " 
                          + ((Label)n.f2.f0.choice).f0.tokenImage + " \n");
	  }
	  else if(n.f2.f0.choice instanceof IntegerLiteral){
	      System.out.printf("\tMOVE TEMP " + n.f1.f1.f0.tokenImage + " " 
	                          + ((IntegerLiteral)n.f2.f0.choice).f0.tokenImage + " \n");
	  }
	  else if(n.f2.f0.choice instanceof HAllocate && ((HAllocate)n.f2.f0.choice).f1.f0.choice instanceof IntegerLiteral){
		  System.out.printf("\tMOVE TEMP " + n.f1.f1.f0.tokenImage + " ");
          n.f2.accept(this);
	  }
	  else{
          n.f2.accept(this);
          int temp1 = retTempNo;
          System.out.printf("\tMOVE TEMP " + n.f1.f1.f0.tokenImage + " ");
          System.out.println("TEMP " + temp1 + " ");
	  }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      if(n.f1.f0.choice instanceof IntegerLiteral){
          System.out.printf("\tPRINT " + ((IntegerLiteral)n.f1.f0.choice).f0.tokenImage + " \n");
	  }
	  else{
          n.f1.accept(this);
          System.out.printf("\tPRINT TEMP " + retTempNo + " \n");
	  }
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      int temp1 = retTempNo;
      int[] tempArr = new int[n.f3.size()];
      for(int i = 0; i < tempArr.length; i++){
          if(n.f3.nodes.elementAt(i) instanceof Temp){
                  tempArr[i] = Integer.parseInt(((Temp)n.f3.nodes.elementAt(i)).f1.f0.tokenImage);
          }
          else{
                  n.f3.nodes.elementAt(i).accept(this);
                  tempArr[i] = retTempNo;
          }
      }
      int temp2 = temp++;
      retTempNo = temp2;
      n.f2.accept(this);
      System.out.printf("\tMOVE TEMP " + temp2 + " CALL TEMP " + temp1 + " ( ");
      for(i = 0; i < tempArr.length; i++) {
        System.out.print(" TEMP " + tempArr[i] + " ");
      }
      n.f4.accept(this);
      System.out.println(" ) ");
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      n.f0.accept(this);
  	  if(n.f1.f0.choice instanceof IntegerLiteral){
          System.out.printf(" HALLOCATE " + ((IntegerLiteral)n.f1.f0.choice).f0.tokenImage + " \n");
      }
	  else{
          n.f1.accept(this);
          int temp1 = temp++;
          System.out.println("\tMOVE TEMP " + temp1 + " HALLOCATE TEMP " + retTempNo + " ");
          retTempNo = temp1;
	          
	  }
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      if(n.f1.f0.choice instanceof IntegerLiteral){
	      int temp1 = temp++;
	      int temp2 = temp++;
	      // First find the temp number
	      n.f2.accept(this);
	      System.out.printf("\tMOVE TEMP " + temp2 + " " + ((IntegerLiteral)n.f1.f0.choice).f0.tokenImage + "\n");
	      System.out.printf("\tMOVE TEMP " + temp1 + " ");
	      n.f0.accept(this);
	      System.out.println(" TEMP " + temp2 + " TEMP " + retTempNo + " ");
	      //n.f1.accept(this);
	      retTempNo = temp1;
	      
	}
	else if(n.f2.f0.choice instanceof IntegerLiteral){
	      int temp1 = temp++;
	      n.f1.accept(this);
	      System.out.printf("\tMOVE TEMP " + temp1 + " ");
	      n.f0.accept(this);
	      System.out.println("TEMP " + retTempNo + " " + ((IntegerLiteral)n.f2.f0.choice).f0.tokenImage + " ");
	      retTempNo = temp1;
	      //n.f2.accept(this);
	}
	else{
	      int temp1, temp2;
	      int temp3 = temp++;
	      n.f1.accept(this);
	      temp1 = retTempNo;
	      n.f2.accept(this);
	      temp2 = retTempNo;
	      System.out.printf("\tMOVE TEMP " + temp3 + " ");
	      n.f0.accept(this);
	      System.out.println("TEMP " + temp1 + " TEMP " + temp2 + " ");
	      retTempNo = temp3;
	}
     return _ret;
 }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n) {
      R _ret=null;
      n.f0.accept(this);
      if(n.f0.which == 0) System.out.printf("LT ");
      else if(n.f0.which == 1) System.out.printf("PLUS ");
      else if(n.f0.which == 2) System.out.printf("MINUS ");
      else System.out.printf("TIMES ");
      
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n) {
      R _ret=null;
      n.f0.accept(this);
      retTempNo = Integer.parseInt(n.f1.f0.tokenImage);
      // n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      int temp1 = temp++;
      System.out.printf("\tMOVE TEMP " + temp1 + " " + n.f0.tokenImage + "\n");
      retTempNo = temp1;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.printf(n.f0.tokenImage + " ");
      return _ret;
   }

}
