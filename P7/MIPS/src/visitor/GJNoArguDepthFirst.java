//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	String registers[] = {"a0", "a1", "a2", "a3", "t0", "t1", "t2", "t3", "t4", "t5", "t6", "t7", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "t8", "t9", "v0", "v1"};
	int noOfParams;
	String temp;
	public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() ){
         Label l = (Label)n.node;
         System.out.println(l.f0.tokenImage + ": ");
    	 return n.node.accept(this);
      }
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( Procedure() )*
    * f13 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      System.out.println(".text");
      System.out.println(".globl main");
      System.out.println("main:");
      System.out.println("move $fp, $sp");
      n.f0.accept(this);
      n.f1.accept(this);
      String s = (String)n.f2.accept(this);
      int noOfParameters = Integer.parseInt(s);
      noOfParams = noOfParameters;
      n.f3.accept(this);
      n.f4.accept(this);
      s = (String)n.f5.accept(this);
      int stackSize = Integer.parseInt(s);
      n.f6.accept(this);
      n.f7.accept(this);
      s = (String)n.f8.accept(this);
      int maxArgs = Integer.parseInt(s);
      if(maxArgs > 4)
    	  stackSize += maxArgs-4;
      System.out.println("subu $sp, $sp, " + (4*stackSize + 4));
      System.out.println("sw $ra, -4($fp)");
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      System.out.println("lw $ra, -4($fp)");
      System.out.println("addu $sp, $sp, " + (4*stackSize+4));
      System.out.println("j $ra");
      n.f12.accept(this);
      n.f13.accept(this);
      System.out.println(".text");
      System.out.println(".globl _halloc");
      System.out.println("_halloc: ");
      System.out.println("li $v0, 9");
      System.out.println("syscall");
      System.out.println("j $ra");
      System.out.println(".text");
      System.out.println(".globl _print");
      System.out.println("_print: ");
      System.out.println("li $v0, 1");
      System.out.println("syscall");
      System.out.println("la $a0, newl");
      System.out.println("li $v0, 4");
      System.out.println("syscall");
      System.out.println("j $ra");

      System.out.println(".data");
      System.out.println(".align   0");
      System.out.println("newl:    .asciiz \"\\n\"" );
      System.out.println(".data");
      System.out.println(".align   0");
      System.out.println("str_er:  .asciiz \" ERROR: abnormal termination\\n\" " );
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    */
   public R visit(Procedure n) {
      R _ret=null;
      String functionName = (String)n.f0.accept(this);
      n.f1.accept(this);
      String s = (String)n.f2.accept(this);
      noOfParams = Integer.parseInt(s);
      n.f3.accept(this);
      n.f4.accept(this);
      s = (String)n.f5.accept(this);
      int stackSize = Integer.parseInt(s);
      n.f6.accept(this);
      n.f7.accept(this);
      s = (String)n.f8.accept(this);
      int maxArgs = Integer.parseInt(s);
      if(maxArgs > 4)
    	  stackSize += maxArgs-4;
      n.f9.accept(this);
      System.out.println(".text");
      System.out.println(".globl" + " " + functionName);
      System.out.println(functionName + ": ");
      System.out.println("sw $fp, -8($sp)");
      System.out.println("move $fp, $sp");
      System.out.println("subu $sp, $sp, " + (4*stackSize + 8));
      System.out.println("sw $ra, -4($fp)");
      n.f10.accept(this);
      n.f11.accept(this);
      System.out.println("lw $ra, -4($fp)");
      System.out.println("lw $fp, " + 4*stackSize + "($sp)");
      System.out.println("addu $sp, $sp, " +(4*stackSize + 8));
      System.out.println("j $ra");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.println("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.println("la $a0, str_er");
      System.out.println("li $v0, 4");	//Print String
      System.out.println("syscall");
      System.out.println("li $v0, 10"); //Exit
      System.out.println("syscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.println();
      String s = (String)n.f1.accept(this);
      int regIndex = Integer.parseInt(s);
      s = (String)n.f2.accept(this);
      System.out.println("beqz $" + registers[regIndex] + " " + s);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s = (String)n.f1.accept(this);
      System.out.println("b "+s);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s = (String)n.f1.accept(this);
      int reg1Index = Integer.parseInt(s);
      s = (String)n.f2.accept(this);
      int loc = Integer.parseInt(s);
      s = (String) n.f3.accept(this);
      int reg2Index = Integer.parseInt(s);
      System.out.println("sw $" + registers[reg2Index] + ", " + loc + "($" + registers[reg1Index] +")");
      
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s = (String)n.f1.accept(this);
      int reg1Index = Integer.parseInt(s);
      s = (String)n.f2.accept(this);
      int reg2Index = Integer.parseInt(s);
      s = (String)n.f3.accept(this);
      int loc = Integer.parseInt(s);
      System.out.println("lw $" + registers[reg1Index] + ", " + loc + "($" + registers[reg2Index] +")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s = (String)n.f1.accept(this);
      int reg1Index = Integer.parseInt(s);
      if(n.f2.f0.choice instanceof HAllocate){
    	  n.f2.accept(this);
    	  System.out.println("move $" + registers[reg1Index] + ", $v0");
      }
      else if(n.f2.f0.choice instanceof BinOp){
    	  temp = "$"+registers[reg1Index];
          n.f2.accept(this);
      }
      else{
    	  SimpleExp simp = (SimpleExp)n.f2.f0.choice;
    	  String retVal = (String)n.f2.accept(this);
    	  if(simp.f0.choice instanceof Reg){
    		  int reg2Index = Integer.parseInt(retVal);
    		  System.out.println("move $" +registers[reg1Index] +", $" + registers[reg2Index]);
    	  }
    	  else if(simp.f0.choice instanceof IntegerLiteral){
    		  System.out.println("li $" +registers[reg1Index] +", " + retVal);
    	  }
    	  else System.out.println("la $" + registers[reg1Index] + ", " + retVal);
      }
      //n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String retVal = (String)n.f1.accept(this);
      if(n.f1.f0.choice instanceof Reg){
    	  System.out.println("move $a0, $" + registers[Integer.parseInt(retVal)]);
      }
      else
    	  System.out.println("li $a0, " + retVal);
      System.out.println("jal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s = (String)n.f1.accept(this);
      n.f2.accept(this);
      int regIndex = Integer.parseInt(s);
      int offset  = Integer.parseInt(n.f2.f1.f0.tokenImage);
      if(noOfParams >= 3 && offset < noOfParams - 4){
    	  System.out.println("lw $"+registers[regIndex] + ", " + 4*offset + "($fp)");
      }
      else {
    	  System.out.println("lw $"+registers[regIndex] + ", " + 4*offset + "($sp)");
      }
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String s = (String)n.f2.accept(this);
      int regIndex = Integer.parseInt(s);
      int offset  = Integer.parseInt(n.f1.f1.f0.tokenImage);
      if(noOfParams >= 4 && offset < noOfParams - 4)
    	  System.out.println("sw $"+registers[regIndex] + ", " + 4*offset + "($fp)");
      else {
    	  System.out.println("sw $"+registers[regIndex] + ", " + 4*offset + "($sp)");
      }
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s = (String)n.f1.accept(this);
      int temp = Integer.parseInt(s);
      temp--;
      s = (String)n.f2.accept(this);
      int regIndex = Integer.parseInt(s);
      System.out.println("sw $"+registers[regIndex] +", " + 4*temp + "($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s = (String) n.f1.accept(this);
      int temp = Integer.parseInt(s);
      if(n.f1.f0.choice instanceof Reg)
    	  System.out.println("jalr $" + registers[temp]);
      else
    	  System.out.println("jalr "+s);
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      R _ret=null;
      _ret = (R)n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      n.f0.accept(this);
      String val = (String)n.f1.accept(this);
      int temp = Integer.parseInt(val);
      if(n.f1.f0.choice instanceof Reg){
    	  System.out.println("move $a0, $" +registers[temp] );
      }
      else {
    	  System.out.println("li $a0, " + temp);
      }
      System.out.println("jal _halloc");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      n.f0.accept(this);
      if(n.f0.f0.which == 0){
    	  if(n.f2.f0.choice instanceof Reg){
    		  System.out.printf("slt ");
    	  }
    	  else{
    		  System.out.printf("slti ");
    	  }
      }
      else if(n.f0.f0.which == 1){
    	  if(n.f2.f0.choice instanceof Reg){
    		  System.out.printf("add ");
    	  }
    	  else{
    		  System.out.printf("addi ");
    	  }
      }
    	
      else if(n.f0.f0.which == 2){
    	  if(n.f2.f0.choice instanceof Reg){
    		  System.out.printf("sub ");
    	  }
    	  else{
    		  System.out.printf("subu ");
    	  }
      }
    	
      else if(n.f0.f0.which == 3){
    		  System.out.printf("mul ");
      }
    	
      String retVal1 = (String)n.f1.accept(this);
      int r1 = Integer.parseInt(retVal1);
      String retval2 = (String)n.f2.accept(this);
      if(n.f2.f0.choice instanceof Reg){
    	  int r2 = Integer.parseInt(retval2);
    	  System.out.println(temp + ", $" + registers[r1] + ", $" + registers[r2]);
      }
      else{
    	  System.out.println(temp + ", $" + registers[r1] + ", " + retval2);
      }
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=null;
      _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n) {
      R _ret=null;
      n.f0.accept(this);
      Integer choice = n.f0.which;
      String index = choice.toString();
      return (R)(index);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      _ret = (R)n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)n.f0.tokenImage;
   }

}
