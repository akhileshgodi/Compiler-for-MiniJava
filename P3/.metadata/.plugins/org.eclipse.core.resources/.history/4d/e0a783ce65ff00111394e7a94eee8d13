package visitor;
import java.util.ArrayList;
import java.util.Hashtable;

public abstract class TableContents {
	public abstract TableContents find(String s);
}

class GoalTable extends TableContents{
	
	String mainClass;
	Hashtable<String, ClassTable> classes = new Hashtable<String, ClassTable>();
    public TableContents find(String s){
	
    	return null;
		 
	}
}

class ClassTable extends TableContents{
	
	boolean isMain = false;	//Is this a main class?
	String className; 			//Name of the class
	Hashtable<String, VariableTable> variables = new Hashtable<String, VariableTable>();
	Hashtable<String, FunctionTable> functions = new Hashtable<String,FunctionTable>();
	TableContents previousPointer;	//Pointer to the previous table (stack?)
	public TableContents find(String s){
		return null;
	}
}

class VariableTable extends TableContents{
	boolean isFormal = false;
	//boolean isInstance = false;
	String type;
	TableContents previousPointer;
	public TableContents find(String s){
		return null;
	
	}
	
}

class FunctionTable extends TableContents{

	Hashtable<String, VariableTable> parameters = new Hashtable<String, VariableTable>();
	ArrayList<VariableTable> orderedParameters = new ArrayList<VariableTable>();
	Hashtable<String, VariableTable> localVars = new Hashtable<String, VariableTable>();
	String returnType;					
	TableContents previousPointer;		//Pointer to the previous scope
	boolean isMain = false;				//Is the function inside main?
	public TableContents find(String s){
		return null;
	}
	
}
