//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class MiniIRBuilder<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	private ClassTable currentClass;
	private GoalTable g;
	SymbolTable current;
	String typeOfReturn;
	public static int temp = 20;
	public static int label = 0;
	boolean flag = false;
	public MiniIRBuilder(SymbolTable s){
		currentClass = null;
		current = s;
	}
	
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      g = (GoalTable) current;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n) {
      // DONE
	  R _ret=null;
      currentClass = (ClassTable) current.find(n.f1.f0.tokenImage);
      current = currentClass;
      System.out.println("MAIN ");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      System.out.println("END ");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      currentClass = (ClassTable) current.find(n.f1.f0.tokenImage);
      current = currentClass;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      currentClass = (ClassTable) current.find(n.f1.f0.tokenImage);
      current = currentClass;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      //n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      //DONE
	  R _ret=null;
      n.f0.accept(this);
      //n.f1.accept(this);
      //n.f2.accept(this);
      FunctionTable f = (FunctionTable)currentClass.findFunctions(n.f2.f0.tokenImage);
      current = f;
      ClassTable c = (ClassTable)f.previousPointer;
      System.out.printf(c.className + "_" +f.funcName+" [ " +(f.orderedParameters.size()+1)+ " ]\n BEGIN\n ");
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      System.out.print("RETURN ");
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      System.out.println("END ");
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      n.f0.accept(this);
      // n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      // DONE
	   R _ret=null;
      FunctionTable f = (FunctionTable)current;
      //REMOVED ON PURPOSE!!! DO NOT UNCOMMENT THE LINE BELOW
      //n.f0.accept(this);
      VariableTable v = (VariableTable)f.findVariables(n.f0.f0.tokenImage);
      if(v!=null){
	      if(f.parameters.containsKey(n.f0.f0.tokenImage)){
	    	  System.out.print("MOVE TEMP " + (1+v.position) + " ");
	      }
	      else if(f.localVars.containsKey(n.f0.f0.tokenImage)){
	    	  System.out.print("MOVE TEMP "+ v.position + " ");
	      }
	      else{
	    	  System.out.println("HSTORE TEMP 0 "+(1+currentClass.allVariables.indexOf(v))*4 + " ");
	      }
	  }
      else{
    	  //TODO : Check if this works
    	  ClassTable tmpClass = currentClass;
    	  ClassTable extClass;
    	  while(tmpClass.isExtends){
    		  extClass = (ClassTable)g.find(currentClass.extendsClassName);
    		  v = (VariableTable)extClass.findVariables(n.f0.f0.tokenImage);
    		  if(v!= null)
    			  break;
    		  tmpClass = extClass;
    	  }
    	  if(v!=null){
    	  	  System.out.println("HSTORE TEMP 0 "+(1+currentClass.allVariables.indexOf(v))*4 + " ");
    	  }
      }
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      // DONE
	   R _ret=null;
      VariableTable v = (VariableTable) current.findVariables(n.f0.f0.tokenImage);
      int temp1 = temp++;
      int temp2 = temp++;
      int temp3 = temp++;
      int label1 = label++;
      int label2 = label++;
      
      System.out.println("HSTORE PLUS BEGIN");
      if(current instanceof FunctionTable){
    	  FunctionTable f = (FunctionTable)current;
    	  if(f.localVars.containsKey(n.f0.f0.tokenImage)){
    		  System.out.println("MOVE TEMP "+temp1 + " TEMP "+ v.position+" ");
    	  }
    	  else if(f.parameters.containsKey(n.f0.f0.tokenImage)){
    		  System.out.println("MOVE TEMP "+temp1 + " TEMP "+ (1+v.position) +" ");
    	  }
    	  else{
        	  System.out.println("HLOAD TEMP "+temp1 +" TEMP 0 "+ (1+currentClass.allVariables.indexOf(v))*4 + " ");
          }
      }
      else{
    	  //TODO : Check if this works
    	  ClassTable tmpClass = currentClass;
    	  ClassTable extClass;
    	  while(tmpClass.isExtends){
    		  extClass = (ClassTable)g.find(currentClass.extendsClassName);
    		  v = (VariableTable)extClass.findVariables(n.f0.f0.tokenImage);
    		  if(v!= null)
    			  break;
    		  tmpClass = extClass;
    	  }
    	  if(v!=null){
    		  System.out.println("HLOAD TEMP "+temp1 +" TEMP 0 "+ (1+currentClass.allVariables.indexOf(v))*4 + " ");
    	  }
      }
      
      System.out.println("RETURN TEMP " + temp1 +" END ");
      System.out.println("PLUS BEGIN MOVE TEMP " + temp2 + " ");
		
      //The line below had been uncommented on purpose. DON"T BULB.
      //n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      System.out.println("CJUMP LT TEMP " + temp2 + " 0 L" + label1 + " ERROR L" + label1 + " NOOP ");
      System.out.println("HLOAD TEMP " + temp3 + " TEMP " + temp1 + " 0 ");
	  System.out.println("CJUMP MINUS 1 LT TEMP " 
				+ temp2 + " TEMP " + temp3 + " L" + label2 + " ERROR L" + label2 + " NOOP ");
	  System.out.println("MOVE TEMP " + temp2 + " TIMES 4 TEMP " + temp2);
	  System.out.println("RETURN TEMP " + temp2 + " END 4 0 ");
		
      
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n) {
      // DONE
	   R _ret=null;
      int label1 = label++;
      int label2 = label++;
      System.out.print("CJUMP ");
      
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      
      System.out.printf("\nL"+label1+" ");
      n.f4.accept(this);
      System.out.printf("\n"+"JUMP L" + label2 + " ");
      System.out.println("L"+label1+ " NOOP ");
      
      n.f5.accept(this);
      n.f6.accept(this);
      System.out.println("L"+label2+ " NOOP ");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      // DONE
	  R _ret=null;
      int label1 = label++;
      int label2 = label++;
      n.f0.accept(this);
      n.f1.accept(this);
      
      System.out.println("L"+label1+ " NOOP CJUMP ");
      n.f2.accept(this);
      n.f3.accept(this);
      
      System.out.println("L"+label2+" ");
      n.f4.accept(this);
      System.out.println("JUMP L"+label1 +" L"+label2+ " NOOP ");
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      // DONE
	  R _ret=null;
      System.out.print("PRINT ");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n) {
      // DONE
	  R _ret=null;
      int label1 = label++;
      int temp1 = temp++;
      System.out.println("BEGIN MOVE TEMP "+temp1+ " 0 CJUMP ");
      n.f0.accept(this);
      System.out.println("L"+label1+" CJUMP ");
      n.f1.accept(this);
      n.f2.accept(this);
      System.out.println("L"+label + " MOVE TEMP " +temp1 + " 1 L"+label1+ " NOOP RETURN TEMP "+ temp1 + " END ");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n) {
      // DONE
	  R _ret=null;
      System.out.print("LT ");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n) {
      // DONE
	  R _ret=null;
      System.out.print("PLUS ");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n) {
       // DONE
	  R _ret=null;
      System.out.print("MINUS ");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n) {
      // DONE
	  R _ret=null;
      System.out.print("TIMES ");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      // DONE but needs checks
	   R _ret=null;
      // TODO : MIGHT CREATE PROBLEMS. CHECK LATER.
      flag = true;
	  n.f0.accept(this);
      flag = false;
	  int temp1 = temp++;
	  int temp2 = temp++;
	  int temp3 = temp++;
	  int temp4 = temp++;
	  int label1 = label++;
	  int label2 = label++;
	  String arrayName = typeOfReturn;
	  VariableTable v = (VariableTable)current.findVariables(arrayName);
	  System.out.println("BEGIN HLOAD TEMP " + temp4 + " ");
	  System.out.printf("PLUS\n BEGIN ");
		
	  if(current instanceof FunctionTable){
		  if(((FunctionTable) current).localVars.containsKey(arrayName) ){
				System.out.println("MOVE TEMP " + temp1 + " TEMP " + v.position + " ");
			}
		  else if( ((FunctionTable)current).parameters.containsKey(arrayName)){
			  System.out.println("MOVE TEMP "+temp1 + " TEMP "+ (1+v.position)+ " ");
		  }
		  else{
				System.out.println("HLOAD TEMP " + temp1 + " TEMP 0 " + (1 + currentClass.allVariables.indexOf(v)) * 4 + " ");
			}
	  }
	  else{
		  // TODO : Check if it works
		  ClassTable tmpClass = currentClass;
    	  ClassTable extClass;
    	  while(tmpClass.isExtends){
    		  extClass = (ClassTable)g.find(currentClass.extendsClassName);
    		  v = (VariableTable)extClass.findVariables(arrayName);
    		  if(v!= null)
    			  break;
    		  tmpClass = extClass;
    	  }
    	  if(v!=null){
    	  	System.out.println("HLOAD TEMP " + temp1 + " TEMP 0 " + (1 + currentClass.allVariables.indexOf(v)) * 4 + " ");
    	  }
	  }
	  System.out.println("RETURN TEMP " + temp1 +" END ");
	  System.out.println("PLUS BEGIN MOVE TEMP " + temp2 + " ");
		
	  n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      System.out.println("CJUMP LT TEMP " + temp2 + " 0 L" + label1 + " ERROR L" + label1 + " NOOP ");
	  System.out.println("HLOAD TEMP " + temp3 + " TEMP " + temp1 + " 0 ");
	  System.out.println("CJUMP MINUS 1 LT TEMP " 
				+ temp2 + " TEMP " + temp3 + " L" + label2 + " ERROR L" + label2 + " NOOP ");
	  System.out.println("MOVE TEMP " + temp2 + " TIMES 4 TEMP " + temp2);
	  System.out.println("RETURN TEMP " + temp2 + " END 4 0 RETURN TEMP " + temp4 + " END ");

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      // DONE
	   R _ret=null;
      int temp1 = temp++;
      int temp2 = temp++;
      System.out.print("BEGIN MOVE TEMP "+temp1 + " ");
      
      n.f0.accept(this);
	  System.out.println("HLOAD TEMP " + temp2 + " TEMP " + temp1 + " 0 ");
	  System.out.println("RETURN TEMP " + temp2 + " END ");
 
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   
   /*CALL
	BEGIN
		MOVE TEMP(new1) EXP
		HLOAD TEMP(new2) TEMP(new1) 0
		HLOAD TEMP(new3) TEMP(new2) TEMP(ID)
	RETURN TEMP(new3)
	END
 '	(' TEMP(new1) EXP# ')'
    */
   public R visit(MessageSend n) {
      // DONE
	   R _ret=null;
      int temp1 = temp++;
      int temp2 = temp++;
      int temp3 = temp++;
      
      System.out.printf("CALL\n BEGIN MOVE TEMP " + temp1+" \n");
      
      n.f0.accept(this);
      
      String className = typeOfReturn;
      ClassTable refClass = (ClassTable)g.find(className);
      if(refClass == null){
    	  VariableTable v = (VariableTable)current.findVariables(typeOfReturn);
    	  if(v == null){
    		  //Get from the allVariables vector
    		  ClassTable tmpClass = currentClass;
    		  ClassTable extClass;
    		  while(tmpClass.isExtends){
    			  extClass = (ClassTable)g.find(tmpClass.extendsClassName);
    			  if(extClass.findVariables(typeOfReturn) != null){
    				  v = (VariableTable) extClass.findVariables(typeOfReturn);
    				  break;
    			  }
    			  tmpClass = extClass;
    		  }
    		  
    	  }
    	  className = v.type;
    	  refClass = (ClassTable)g.find(className);
      }
      className = refClass.className;
      n.f1.accept(this);
      FunctionTable f = (FunctionTable)refClass.findFunctions(n.f2.f0.tokenImage);
      if(f == null){
	      ClassTable tmpClass = refClass;
		  ClassTable extClass;
		  while(tmpClass.isExtends){
			  extClass = (ClassTable)g.find(tmpClass.extendsClassName);
			  f = (FunctionTable)extClass.findFunctions(n.f2.f0.tokenImage);
			  if(f!= null)
				  break;
			  tmpClass = extClass;
			}
      }
      System.out.println("HLOAD TEMP " + temp2 + " TEMP " + temp1 + " 0 ");
      System.out.println("HLOAD TEMP " + temp3 + " TEMP " + temp2 + " " + refClass.allFunctions.indexOf(f)*4 + " ");
      System.out.println("RETURN TEMP " + temp3 + " END ");
      //n.f2.accept(this);
      n.f3.accept(this);
      System.out.print("( TEMP " + temp1 + " ");
      n.f4.accept(this);
      //Code for expression list comes here.
      
      n.f5.accept(this);
      System.out.println(")");
      typeOfReturn = className;
      return _ret;
      
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n) {
      // DONE
	   R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n) {
      // DONE
	   R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n) {
      // DONE
	  R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      // DONE
	  R _ret=null;
      n.f0.accept(this);
      typeOfReturn = n.f0.tokenImage;
      System.out.print(n.f0.tokenImage+ " ");
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      // DONE
	  R _ret=null;
      n.f0.accept(this);
      typeOfReturn = "boolean";
      System.out.println("1 ");
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      // DONE
	  R _ret=null;
      n.f0.accept(this);
      typeOfReturn = "boolean";
      System.out.println("0 ");
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      // DONE
	 
	  R _ret=null;
      n.f0.accept(this);
      typeOfReturn = n.f0.tokenImage;
      if(flag==true) return _ret;
      FunctionTable f = null; //= (FunctionTable)current;
      VariableTable v = null ; //= (VariableTable)f.findVariables(n.f0.tokenImage);
      
      if(current instanceof FunctionTable){
    	  f = (FunctionTable)current;
    	  //ONLY WHEN IT IS TO THE RHS OF AN ASSIGNMENT STATEMENT. DON"T BULB
    	  
	      if(f!=null && f.findVariables(n.f0.tokenImage) instanceof VariableTable) {
	    	  v = (VariableTable) f.findVariables(n.f0.tokenImage);
	    	  if(f.parameters.containsKey(n.f0.tokenImage)){
		    	  System.out.print("TEMP " + (1+v.position) + " ");
		      }
	    	  else if(f.localVars.containsKey(n.f0.tokenImage)) {
	    		  System.out.print("TEMP "+v.position + " ");
	    	  }
	    	  else{
	              v = (VariableTable) current.findVariables(n.f0.tokenImage);
	              /*
	              if(v == null){
		              ClassTable tmpClass = currentClass;
		        	  ClassTable extClass;
		        	  while(tmpClass.isExtends){
		        		  extClass = (ClassTable)g.find(tmpClass.extendsClassName);
		        		  v = (VariableTable)extClass.findVariables(n.f0.tokenImage);
		        		  if(v!= null)
		        			  break;
		        		  tmpClass = extClass;
		        	  }
	              }*/
	              if(v!=null){
	            	  //System.out.println("Problem???" + v.type);
	            	  int temp1 = temp++;
	                  System.out.println("BEGIN HLOAD TEMP " + temp1 + " TEMP 0 " + (1 + currentClass.allVariables.indexOf(v))*4 + " ");
	    	          System.out.println("RETURN TEMP " + temp1 + " END ");
	              }
	          }

	      }
	      
	      else{
	          v = (VariableTable) currentClass.findVariables(n.f0.tokenImage);
	          if(v == null){
	              ClassTable tmpClass = currentClass;
	        	  ClassTable extClass;
	        	  while(tmpClass.isExtends){
	        		  extClass = (ClassTable)g.find(tmpClass.extendsClassName);
	        		  v = (VariableTable)extClass.findVariables(n.f0.tokenImage);
	        		  if(v!= null)
	        			  break;
	        		  tmpClass = extClass;
	        	  }
	          }
	          if(v!=null){
	        	  int temp1 = temp++;
	              System.out.println("BEGIN HLOAD TEMP " + temp1 + " TEMP 0 " + (1 +currentClass.allVariables.indexOf(v))*4 + " ");
		          System.out.printf("RETURN TEMP " + temp1 + " END ");
	          }
	      }
	    
      }
      /*
      else{
          v = (VariableTable) currentClass.findVariables(n.f0.tokenImage);
          if(v == null){
              ClassTable tmpClass = currentClass;
        	  ClassTable extClass;
        	  while(tmpClass.isExtends){
        		  extClass = (ClassTable)g.find(tmpClass.extendsClassName);
        		  v = (VariableTable)extClass.findVariables(n.f0.tokenImage);
        		  if(v!= null)
        			  break;
        		  tmpClass = extClass;
        	  }
          }
          if(v!=null){
        	  int temp1 = temp++;
              System.out.println("BEGIN HLOAD TEMP " + temp1 + " TEMP 0 " + (1 +v.position)*4 + " ");
	          System.out.println("RETURN TEMP " + temp1 + " END ");
          }
      }*/
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      // DONE
	  R _ret=null;
      n.f0.accept(this);
      typeOfReturn = currentClass.className;
      System.out.println("TEMP 0 ");
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
	 // DONE
	  R _ret=null;
      int temp1 = temp++;
      int temp2 = temp++;
      int temp3 = temp++;
      int label1 = label++;
      int label2 = label++;
      
      System.out.printf(" BEGIN MOVE TEMP "+ temp1 + " ");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      System.out.println("MOVE TEMP " + temp2 + " HALLOCATE TIMES PLUS TEMP " + temp1 + " 1 4 ");
	  System.out.println("MOVE TEMP " + temp3 + " 4 ");
	  System.out.println("L" + label1 + " NOOP CJUMP LT TEMP " + temp3 + " TIMES PLUS TEMP " + temp1 + " 1 4 L" + label2 + " ");
	  System.out.println("HSTORE PLUS TEMP " + temp2 + " TEMP " + temp3 + " 0 0 ");
	  System.out.println("MOVE TEMP " + temp3 + " PLUS TEMP " + temp3 + " 4 ");
	  System.out.println("JUMP L" + label1 + " L" + label2 + " NOOP HSTORE TEMP " + temp2 + " 0 TEMP " + temp1 + " ");
	  System.out.println("RETURN TEMP " + temp2 + " END ");
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n) {
      // DONE
	  R _ret=null;
      int temp1 = temp++;
      int temp2 = temp++;
      
      n.f0.accept(this);
      String className = n.f1.f0.tokenImage;
      ClassTable refClass = (ClassTable)g.find(className);
      
      System.out.println("BEGIN MOVE TEMP "+temp1+ " HALLOCATE " + refClass.allFunctions.size()*4 + " ");
      System.out.println("MOVE TEMP "+temp2+ " HALLOCATE " + (refClass.allVariables.size()+1)*4 + " ");
      for(int i = 0; i < refClass.allFunctions.size(); i++){
    	  ClassTable funcScopeClass = (ClassTable)refClass.allFunctions.get(i).previousPointer;
    	  System.out.println("HSTORE TEMP "+ temp1 + " "+i*4+" "+ funcScopeClass.className+ "_"+refClass.allFunctions.get(i).funcName);
      }
      
      System.out.println("HSTORE TEMP " + temp2 + " 0 TEMP " + temp1 + " ");
      for(int j = 1; j<1+refClass.allVariables.size();j++)
    	  System.out.println("HSTORE TEMP " + temp2 + " " + j * 4 + " 0 ");
      System.out.println("RETURN TEMP " + temp2 +" END ");
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n) {
      // DONE
	   R _ret=null;
      System.out.println("MINUS 1 ");
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n) {
      // DONE
	  R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

}